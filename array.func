defn charToInt c = {(charToNum c) - (charToNum '0')}
defn intToChar i = {numToChar (i + charToNum '0')}

defn stringToInt s t = {
    case s of {
        [] -> {t}
        [x: xs] -> {stringToInt xs (t * 10 + (charToInt x))}
    }
}

defn readInt = do {
    defn str <- {read}
    return {stringToInt str 0}
}

defn printInt x = do {
    case (x > 9) of {
        True -> do { { printInt(x / 10) } }
        False -> do { { print "" } }
    }
    {print [(intToChar (x % 10))]}
}

defn zeros = { [0:zeros] }

defn take l n = {
    case (n == 0) of {
        True -> { [] }
        False -> { 
            case l of {
                [] -> { [] }
                [x:xs] -> { [x:(take xs (n - 1))] }
            }
        }
    }
}

defn readNumbers a n = do {
    case (n > 0) of {
        True -> do {
            defn t <- { readInt }
            { modify a (n - 1) t }
            { readNumbers a (n - 1) }
        }
        False -> do {
            return { 0 }
        }
    }
}

defn main = do {
    defn n <- { readInt }
    defn a <- return { array (take zeros n) }
    { readNumbers a n }
    defn p <- { readInt }
    { printInt (access a (n - 1 - p)) }
}